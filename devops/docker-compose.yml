version: '2'

networks:
  app-network:
    driver: bridge

services:
  app-api:
    container_name: ${PROJECT_NAME}-api-${BACKEND_TECH}
    restart: always
    build:
      context:  ../
      dockerfile: ./devops/docker/api/Dockerfile
    networks:
      - app-network
    volumes:
      - '../${API_DIR}/:/var/srv/app'
      - '/var/srv/app/node_modules'
    environment:
      - NODE_ENV=${NODE_ENV}
    ports:
      - "${API_HTTP_PORT}:4000"

  app-front:
    container_name: ${PROJECT_NAME}-front-${FRONTEND_TECH}
    restart: always
    build:
      context:  ../
      dockerfile: ./local/docker/front/files/Dockerfile
    networks:
      - app-network
    volumes:
      - '../${FRONT_DIR}/:/var/srv/app'
      - '/var/srv/app/node_modules'
    environment:
      - NODE_ENV=${NODE_ENV}
    ports:
      - "${FRONT_HTTP_PORT}:3000"

  app-db:
    container_name: ${PROJECT_NAME}-${RELATIONAL_BD_TECH}
    image: postgres:${PG_VERSION}-alpine
    restart: always
    environment:
      - POSTGRES_DB=${PG_DB_NAME}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
    networks:
      - app-network
    volumes:
      - ./docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - "${PG_PORT}:5432"

  app-redis:
    image: redis:${REDIS_VERSION}-alpine
    container_name: ${PROJECT_NAME}-redis
    restart: always
    hostname: ${PROJECT_NAME}-redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - app-network
    ports:
      - "${REDIS_PORT}:6379"
